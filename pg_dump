--
-- PostgreSQL database dump
--

-- Dumped from database version 14.5
-- Dumped by pg_dump version 14.5

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: priority; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.priority AS ENUM (
    'low',
    'medium',
    'high'
);


ALTER TYPE public.priority OWNER TO postgres;

--
-- Name: get_count_completed(integer, timestamp with time zone, timestamp with time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_count_completed(emp_id integer, startdate timestamp with time zone, enddate timestamp with time zone) RETURNS integer
    LANGUAGE sql
    AS $$
	SELECT count(*) FROM jobs
	WHERE ((emp_id = executor_empl_id)
			AND (startDate <= created) AND (endDate >= created)
			AND (startDate <= completed) and (endDate >= completed)
			AND (completed <= deadline));
$$;


ALTER FUNCTION public.get_count_completed(emp_id integer, startdate timestamp with time zone, enddate timestamp with time zone) OWNER TO postgres;

--
-- Name: get_count_inwork(integer, timestamp with time zone, timestamp with time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_count_inwork(emp_id integer, startdate timestamp with time zone, enddate timestamp with time zone) RETURNS integer
    LANGUAGE sql
    AS $$
	SELECT count(*) FROM jobs
	WHERE ((emp_id = executor_empl_id)
			AND (startDate <= created) AND (endDate >= created)
			AND (completed = NULL) AND NOW() < deadline)
$$;


ALTER FUNCTION public.get_count_inwork(emp_id integer, startdate timestamp with time zone, enddate timestamp with time zone) OWNER TO postgres;

--
-- Name: get_count_nocompleted(integer, timestamp with time zone, timestamp with time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_count_nocompleted(emp_id integer, startdate timestamp with time zone, enddate timestamp with time zone) RETURNS integer
    LANGUAGE sql
    AS $$
	SELECT count(*) FROM jobs
	WHERE ((emp_id = executor_empl_id)
			AND (startDate <= created) AND (endDate >= created)
			AND (completed = NULL) AND NOW() > deadline)
$$;


ALTER FUNCTION public.get_count_nocompleted(emp_id integer, startdate timestamp with time zone, enddate timestamp with time zone) OWNER TO postgres;

--
-- Name: get_count_tasks(integer, timestamp with time zone, timestamp with time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_count_tasks(emp_id integer, startdate timestamp with time zone, enddate timestamp with time zone) RETURNS integer
    LANGUAGE sql
    AS $$
	SELECT count(*) FROM jobs
	WHERE ((emp_id = executor_empl_id)
			AND (startDate <= created) AND (endDate >= created));
$$;


ALTER FUNCTION public.get_count_tasks(emp_id integer, startdate timestamp with time zone, enddate timestamp with time zone) OWNER TO postgres;

--
-- Name: get_count_сompleted_faildate(integer, timestamp with time zone, timestamp with time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public."get_count_сompleted_faildate"(emp_id integer, startdate timestamp with time zone, enddate timestamp with time zone) RETURNS integer
    LANGUAGE sql
    AS $$
	SELECT count(*) FROM jobs
	WHERE ((emp_id = executor_empl_id)
			AND (startDate <= created) AND (endDate >= created)
			AND (startDate <= completed) AND (endDate <= completed)
			AND (completed > deadline))
$$;


ALTER FUNCTION public."get_count_сompleted_faildate"(emp_id integer, startdate timestamp with time zone, enddate timestamp with time zone) OWNER TO postgres;

--
-- Name: get_jobs_json(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_jobs_json() RETURNS TABLE(j json)
    LANGUAGE sql
    AS $$
        SELECT json_agg(jo) FROM (SELECT * FROM jobs) AS jo;
    $$;


ALTER FUNCTION public.get_jobs_json() OWNER TO postgres;

--
-- Name: get_report(integer, timestamp with time zone, timestamp with time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_report(emp_id integer, startdate timestamp with time zone, enddate timestamp with time zone) RETURNS TABLE(employeeid integer, alltasks integer, intimecompeted integer, nonintimecompleted integer, failedtasks integer, inworktasks integer)
    LANGUAGE sql
    AS $$
	SELECT emp_id,
			get_count_tasks(emp_id, startDate, endDate),
			get_count_completed(emp_id, startDate, endDate),
			get_count_сompleted_failDate(emp_id, startDate, endDate),
			get_count_noCompleted(emp_id, startDate, endDate),
			get_count_inWork(emp_id, startDate, endDate)
$$;


ALTER FUNCTION public.get_report(emp_id integer, startdate timestamp with time zone, enddate timestamp with time zone) OWNER TO postgres;

--
-- Name: get_reports(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_reports() RETURNS TABLE(employeeid integer, alltasks integer, intimecompeted integer, nonintimecompleted integer, failedtasks integer, inworktasks integer)
    LANGUAGE plpgsql
    AS $$
	
DECLARE
	empId integer;
	startDate timestamp = (SELECT MIN(created) FROM jobs);
	endDate timestamp = (SELECT MAX(created) FROM jobs);
BEGIN
	
	FOR empId IN (SELECT employee_id FROM employee) LOOP
		RETURN QUERY SELECT * FROM get_report(empId, startDate, endDate);
	END LOOP;
	RETURN;
END;

$$;


ALTER FUNCTION public.get_reports() OWNER TO postgres;

--
-- Name: remove_all_jobs_after_year(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.remove_all_jobs_after_year() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
        DELETE FROM jobs WHERE current_timestamp >= jobs.deadline + make_interval(years := 1);
    END;
    $$;


ALTER FUNCTION public.remove_all_jobs_after_year() OWNER TO postgres;

--
-- Name: send_jobs_json_linux(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.send_jobs_json_linux() RETURNS void
    LANGUAGE sql
    AS $$
        COPY(SELECT get_jobs_json()) TO '/var/lib/postgresql/jobs.json';
    $$;


ALTER FUNCTION public.send_jobs_json_linux() OWNER TO postgres;

--
-- Name: send_report(integer, timestamp with time zone, timestamp with time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.send_report(integer, timestamp with time zone, timestamp with time zone) RETURNS void
    LANGUAGE sql
    AS $_$
CREATE TEMP TABLE table_report ON COMMIT DROP
AS
SELECT * FROM get_report($1, $2, $3);
COPY (SELECT * FROM table_report) TO E'/home/dmitry/Documents/report.csv' CSV HEADER;
$_$;


ALTER FUNCTION public.send_report(integer, timestamp with time zone, timestamp with time zone) OWNER TO postgres;

--
-- Name: send_report_linux(integer, timestamp with time zone, timestamp with time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.send_report_linux(integer, timestamp with time zone, timestamp with time zone) RETURNS void
    LANGUAGE sql
    AS $_$
CREATE TEMP TABLE table_report ON COMMIT DROP
AS
SELECT * FROM get_report($1, $2, $3);
COPY (SELECT * FROM table_report) TO E'/var/lib/postgresql/report.csv' CSV HEADER;
$_$;


ALTER FUNCTION public.send_report_linux(integer, timestamp with time zone, timestamp with time zone) OWNER TO postgres;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: clients; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.clients (
    client_id integer NOT NULL,
    first_name character varying(15),
    second_name character varying(15),
    organisation_name text NOT NULL,
    phone text,
    email text,
    address text
);


ALTER TABLE public.clients OWNER TO postgres;

--
-- Name: available_clients; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.available_clients (
    contract_id integer
)
INHERITS (public.clients);


ALTER TABLE public.available_clients OWNER TO postgres;

--
-- Name: available_clients_client_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.available_clients ALTER COLUMN client_id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.available_clients_client_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: clients_client_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.clients ALTER COLUMN client_id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.clients_client_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: contracts; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.contracts (
    contract_id integer NOT NULL,
    client_id integer NOT NULL,
    sneaker_id integer NOT NULL,
    sign_date timestamp without time zone NOT NULL,
    deadline timestamp without time zone
);


ALTER TABLE public.contracts OWNER TO postgres;

--
-- Name: contracts_contract_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.contracts ALTER COLUMN contract_id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.contracts_contract_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: employee; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.employee (
    employee_id integer NOT NULL,
    first_name character varying(15) NOT NULL,
    second_name character varying(15) NOT NULL,
    father_name character varying(15),
    phone text,
    email text,
    address text,
    factory_role character varying(30),
    login character varying(50),
    password bytea,
    salt_pass text,
    hired timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.employee OWNER TO postgres;

--
-- Name: employee_employee_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.employee ALTER COLUMN employee_id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.employee_employee_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: jobs; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.jobs (
    job_id integer NOT NULL,
    creator_empl_id integer NOT NULL,
    executor_empl_id integer NOT NULL,
    contr_id integer,
    description text NOT NULL,
    created timestamp without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    deadline timestamp without time zone NOT NULL,
    prior public.priority NOT NULL,
    completed timestamp without time zone
);


ALTER TABLE public.jobs OWNER TO postgres;

--
-- Name: jobs_job_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.jobs ALTER COLUMN job_id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.jobs_job_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: potential_clients; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.potential_clients (
    meeting timestamp without time zone
)
INHERITS (public.clients);


ALTER TABLE public.potential_clients OWNER TO postgres;

--
-- Name: potential_clients_client_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.potential_clients ALTER COLUMN client_id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.potential_clients_client_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: sneakers; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.sneakers (
    sneaker_id integer NOT NULL,
    model text,
    weight numeric(5,2),
    size character varying(4),
    arrived timestamp without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    leaved timestamp without time zone
);


ALTER TABLE public.sneakers OWNER TO postgres;

--
-- Name: sneakers_sneaker_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.sneakers ALTER COLUMN sneaker_id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.sneakers_sneaker_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Data for Name: available_clients; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.available_clients (client_id, first_name, second_name, organisation_name, phone, email, address, contract_id) FROM stdin;
3	Евгений	\N	ОАО "Свiй Шоп"	\N	evgenyContShop@ask.com	23398, Київська область, місто Київ, пл. Б. Грінченка, 37 	1
2	Nickel	Willson	AdiPro	+1(800)-1453-27-25	adiProContact@yahoo.com	Armin-Schumacher-Allee 65c 2125 Horgen	2
1	\N	\N	Retro Sneaker	\N	9.125.57.184	606700, Свердловская область, город Коломна, бульвар Косиора, 76	3
7	asd	фы	фы	фы	ya@yandex.ru	фы	\N
8	\N	as	as	\N	asd@jopa.com	\N	\N
\.


--
-- Data for Name: clients; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.clients (client_id, first_name, second_name, organisation_name, phone, email, address) FROM stdin;
\.


--
-- Data for Name: contracts; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.contracts (contract_id, client_id, sneaker_id, sign_date, deadline) FROM stdin;
1	3	2	2022-09-11 15:21:22.873601	2022-10-11 15:21:22.873601
2	2	3	2022-07-31 15:24:52.174858	2022-11-23 15:24:52.174858
3	1	2	2022-09-11 15:24:52.221908	\N
4	7	1	2022-11-03 13:07:30.454352	2022-11-04 00:00:00
5	7	1	2022-11-03 13:07:30.459681	2022-11-04 00:00:00
6	7	2	2022-11-03 13:07:30.461428	2022-11-04 00:00:00
7	7	2	2022-11-03 13:07:30.463317	2022-11-04 00:00:00
8	7	3	2022-11-03 13:07:30.466369	2022-11-04 00:00:00
9	7	3	2022-11-03 13:07:30.468824	2022-11-04 00:00:00
\.


--
-- Data for Name: employee; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.employee (employee_id, first_name, second_name, father_name, phone, email, address, factory_role, login, password, salt_pass, hired) FROM stdin;
1	Дмитрий	Лакутин	Алексеевич	+79775179280	haydurb@mail.com	Московская обл. г.Ногинск ул.Пушкина д.15 кв.123	MAN1	haydurb@mail.com	\\xbdd0c84710cce54abc6987c37de72803e4ac6301cfc469f65efb95fde886ff4a	Dilya	2022-10-27 18:29:42.799911
2	Sharil	Lebowski	\N	+1 720-409-2532	wheresthemoney@gmail.com	c. USA st. Texas s. 1638 Brentwood Drive 	EMP1	Olechik34	\\x50cd5018ef01e65388c81b56710caa7e43e7a5029703295a79d29afd3c9a18a0	Dilya	2022-10-27 18:29:42.799911
3	Олег	Харьков	Владимирович	89265334529	\N	\N	EMP2	89265334529	\\x1096ca9d8e3ddea5978a8dd07aaa0cc09083886b1ca932e230b23ffd6284ae96	Dilya	2022-10-27 18:29:42.799911
\.


--
-- Data for Name: jobs; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.jobs (job_id, creator_empl_id, executor_empl_id, contr_id, description, created, deadline, prior, completed) FROM stdin;
1	1	2	2	Send email to adiProContact@yahoo.com	2022-09-11 16:46:05.894605	2022-09-11 19:46:05.894605	high	\N
3	1	3	1	Предложи evgenyContShop@ask.com новый контракт.	2022-09-11 17:02:51.52222	2022-09-12 02:02:51.52222	low	\N
4	3	3	\N	Create new tasks for wheresthemoney@gmail.com	2022-09-11 17:03:01.280848	2022-09-11 21:03:01.280848	medium	\N
\.


--
-- Data for Name: potential_clients; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.potential_clients (client_id, first_name, second_name, organisation_name, phone, email, address, meeting) FROM stdin;
1	Сергей	Комаров	ИП Комаровский бутик	8(969)2012298	komarov@yandex.ru	Нижний Новгород Тюхачевского д.56	2023-03-15 10:00:00
2	\N	\N	Shabudabu Shop	3(8585)775-27-01 	shabudabu0shop@gmail.com	4786 Lyric Causeway Suite 291 West Irma, NM 84308-2385	2027-06-28 17:00:00
3	\N	\N	SneakerTops	\N	\N	\N	\N
5	asd	фы	фы	фы	ya@yandex.ru	фы	2022-11-05 00:00:00
6	\N	as	as	\N	asd@jopa.com	\N	\N
\.


--
-- Data for Name: sneakers; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.sneakers (sneaker_id, model, weight, size, arrived, leaved) FROM stdin;
1	Ортопедические	200.00	42	2022-09-11 14:07:30.950459	\N
2	Ultra Force X4	269.52	41	2022-09-11 14:07:30.964353	\N
3	Ортопедические	300.00	39	2022-05-20 15:43:00	\N
\.


--
-- Name: available_clients_client_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.available_clients_client_id_seq', 10, true);


--
-- Name: clients_client_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.clients_client_id_seq', 1, false);


--
-- Name: contracts_contract_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.contracts_contract_id_seq', 9, true);


--
-- Name: employee_employee_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.employee_employee_id_seq', 8, true);


--
-- Name: jobs_job_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.jobs_job_id_seq', 4, true);


--
-- Name: potential_clients_client_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.potential_clients_client_id_seq', 6, true);


--
-- Name: sneakers_sneaker_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.sneakers_sneaker_id_seq', 3, true);


--
-- Name: available_clients available_clients_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.available_clients
    ADD CONSTRAINT available_clients_pkey PRIMARY KEY (client_id);


--
-- Name: clients clients_pk; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.clients
    ADD CONSTRAINT clients_pk UNIQUE (client_id);


--
-- Name: clients clients_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.clients
    ADD CONSTRAINT clients_pkey PRIMARY KEY (client_id);


--
-- Name: contracts contracts_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.contracts
    ADD CONSTRAINT contracts_pkey PRIMARY KEY (contract_id);


--
-- Name: employee employee_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.employee
    ADD CONSTRAINT employee_pkey PRIMARY KEY (employee_id);


--
-- Name: jobs jobs_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.jobs
    ADD CONSTRAINT jobs_pkey PRIMARY KEY (job_id);


--
-- Name: potential_clients potential_clients_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.potential_clients
    ADD CONSTRAINT potential_clients_pkey PRIMARY KEY (client_id);


--
-- Name: sneakers sneakers_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.sneakers
    ADD CONSTRAINT sneakers_pkey PRIMARY KEY (sneaker_id);


--
-- Name: client_address_index; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX client_address_index ON public.clients USING btree (address);


--
-- Name: client_name_index; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX client_name_index ON public.clients USING btree (first_name);


--
-- Name: client_org_name_index; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX client_org_name_index ON public.clients USING btree (organisation_name);


--
-- Name: jobs one_year_ttl; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER one_year_ttl AFTER INSERT OR UPDATE ON public.jobs FOR EACH STATEMENT EXECUTE FUNCTION public.remove_all_jobs_after_year();


--
-- Name: available_clients contract_ref_constr; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.available_clients
    ADD CONSTRAINT contract_ref_constr FOREIGN KEY (contract_id) REFERENCES public.contracts(contract_id);


--
-- Name: contracts contracts_client_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.contracts
    ADD CONSTRAINT contracts_client_id_fkey FOREIGN KEY (client_id) REFERENCES public.available_clients(client_id);


--
-- Name: contracts contracts_sneaker_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.contracts
    ADD CONSTRAINT contracts_sneaker_id_fkey FOREIGN KEY (sneaker_id) REFERENCES public.sneakers(sneaker_id);


--
-- Name: jobs jobs_contr_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.jobs
    ADD CONSTRAINT jobs_contr_id_fkey FOREIGN KEY (contr_id) REFERENCES public.contracts(contract_id);


--
-- Name: jobs jobs_creator_empl_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.jobs
    ADD CONSTRAINT jobs_creator_empl_id_fkey FOREIGN KEY (creator_empl_id) REFERENCES public.employee(employee_id);


--
-- Name: jobs jobs_executor_empl_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.jobs
    ADD CONSTRAINT jobs_executor_empl_id_fkey FOREIGN KEY (executor_empl_id) REFERENCES public.employee(employee_id);


--
-- Name: jobs empl_select_p; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY empl_select_p ON public.jobs FOR SELECT TO employee USING ((( SELECT employee.employee_id
   FROM public.employee
  WHERE ((employee.factory_role)::text = CURRENT_USER)
 LIMIT 1) = executor_empl_id));


--
-- Name: jobs empl_update_p; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY empl_update_p ON public.jobs FOR UPDATE TO employee USING ((( SELECT employee.employee_id
   FROM public.employee
  WHERE ((employee.factory_role)::text = CURRENT_USER)
 LIMIT 1) = executor_empl_id));


--
-- Name: jobs; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.jobs ENABLE ROW LEVEL SECURITY;

--
-- Name: jobs man_update_p; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY man_update_p ON public.jobs FOR UPDATE TO factory_manager USING (((( SELECT employee.employee_id
   FROM public.employee
  WHERE ((employee.factory_role)::text = CURRENT_USER)
 LIMIT 1) = creator_empl_id) OR (( SELECT employee.employee_id
   FROM public.employee
  WHERE ((employee.factory_role)::text = CURRENT_USER)
 LIMIT 1) = executor_empl_id)));


--
-- Name: TABLE clients; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.clients TO factory_admin;


--
-- Name: TABLE available_clients; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.available_clients TO factory_admin;


--
-- Name: TABLE contracts; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.contracts TO factory_admin;


--
-- Name: TABLE employee; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.employee TO factory_admin;


--
-- Name: TABLE jobs; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.jobs TO factory_admin;
GRANT SELECT,INSERT,UPDATE ON TABLE public.jobs TO factory_manager;
GRANT SELECT,UPDATE ON TABLE public.jobs TO employee;


--
-- Name: TABLE potential_clients; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.potential_clients TO factory_admin;


--
-- Name: TABLE sneakers; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.sneakers TO factory_admin;


--
-- PostgreSQL database dump complete
--

